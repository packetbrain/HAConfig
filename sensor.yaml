#######################################
#                                     #
# Sensors                             #
#                                     #
#######################################
#
#
# Track the number of days left for a LetsEncrypt certificate - display as a badge
#
#
- platform: command_line
  name: SSL Cert Expiry
  unit_of_measurement: days
  scan_interval: 10800
  command: "/config/ssl-cert-check -b -c /certs/cert.pem | awk '{ print $NF }'"
#
#
# Template to make garage 5 state solution display in a nice looking way
#
#
- platform: template
  sensors:
    garage_state:
      friendly_name: "Garage State"
      value_template: >-
        {% if states.input_boolean.garage_stopped.state == 'on' %}
          Stopped
        {% elif states.input_boolean.garage_opening_twelve.state == 'on' %}
          Opening (12)
        {% elif states.input_boolean.garage_opening_eleven.state == 'on' %}
          Opening (11)
        {% elif states.input_boolean.garage_opening_ten.state == 'on' %}
          Opening (10)
        {% elif states.input_boolean.garage_opening_nine.state == 'on' %}
          Opening (9)
        {% elif states.input_boolean.garage_opening_eight.state == 'on' %}
          Opening (8)
        {% elif states.input_boolean.garage_opening_seven.state == 'on' %}
          Opening (7)
        {% elif states.input_boolean.garage_opening_six.state == 'on' %}
          Opening (6)
        {% elif states.input_boolean.garage_opening_five.state == 'on' %}
          Opening (5)
        {% elif states.input_boolean.garage_opening_four.state == 'on' %}
          Opening (4)
        {% elif states.input_boolean.garage_opening_three.state == 'on' %}
          Opening (3)
        {% elif states.input_boolean.garage_opening_two.state == 'on' %}
          Opening (2)
        {% elif states.input_boolean.garage_opening_one.state == 'on' %}
          Opening (1)
        {% elif states.input_boolean.garage_closing_twelve.state == 'on' %}
          Closing (12)
        {% elif states.input_boolean.garage_closing_eleven.state == 'on' %}
          Closing (11)
        {% elif states.input_boolean.garage_closing_ten.state == 'on' %}
          Closing (10)
        {% elif states.input_boolean.garage_closing_nine.state == 'on' %}
          Closing (9)
        {% elif states.input_boolean.garage_closing_eight.state == 'on' %}
          Closing (8)
        {% elif states.input_boolean.garage_closing_seven.state == 'on' %}
          Closing (7)
        {% elif states.input_boolean.garage_closing_six.state == 'on' %}
          Closing (6)
        {% elif states.input_boolean.garage_closing_five.state == 'on' %}
          Closing (5)
        {% elif states.input_boolean.garage_closing_four.state == 'on' %}
          Closing (4)
        {% elif states.input_boolean.garage_closing_three.state == 'on' %}
          Closing (3)
        {% elif states.input_boolean.garage_closing_two.state == 'on' %}
          Closing (2)
        {% elif states.input_boolean.garage_closing_one.state == 'on' %}
          Closing (1)
        {% elif states.sensor.reed_switch_closed.state == 'ON' %}
          Closed
        {% elif states.sensor.reed_switch_open.state == 'ON' %}
          Open
        {% else %}
          Stopped
        {% endif %}
      icon_template: >-
        {% if states.input_boolean.garage_stopped.state == 'on' %}
          mdi:garage-alert
        {% elif states.input_boolean.garage_opening.state == 'on' %}
          mdi:garage-open
        {% elif states.input_boolean.garage_closing.state == 'on' %}
          mdi:garage-open
        {% elif states.sensor.reed_switch_closed.state == 'ON' %}
          mdi:garage
        {% elif states.sensor.reed_switch_open.state == 'ON' %}
          mdi:garage-open
        {% else %}
          mdi:garage-alert
        {% endif %}
#
#
# Tracking Reed Switches until I feel comfortable with garage cover operation
#
#
- platform: mqtt
  name: "Reed Switch Closed"
  state_topic: "stat/garage/POWER2"
  icon: mdi:nintendo-switch

- platform: mqtt
  name: "Reed Switch Open"
  state_topic: "stat/garage/POWER3"
  icon: mdi:nintendo-switch
#
#
# Tracking the garage opens as a badge until I feel comfortable with garage cover 
#   also checking out the count functionality with the history component
#
#
- platform: history_stats
  name: Garage Today
  entity_id: sensor.reed_switch_open
  state: 'ON'
# old way below double counts
#  entity_id: cover.garage
#  state: 'open'
  type: count
  start: '{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}'
  end: '{{ now() }}'
#
#
# Laundry Door Sensor - NodeMcu tasmota
#
#
- platform: mqtt
  name: "LaundryReed"
  state_topic: "stat/laundrydoor/POWER1"


- platform: template
  sensors:
    laundry_door:
      friendly_name: "Laundry Door"
      value_template: >-
        {% if states.sensor.laundryreed.state == 'ON' %}
          Open
        {% elif states.sensor.laundryreed.state == 'OFF' %}
          Closed
        {% else %}
          Error
        {% endif %}


- platform: mqtt
  name: "LaundryPlunger"
  state_topic: "stat/laundrydoor/POWER2"

- platform: template
  sensors:
    laundry_deadbolt:
      friendly_name: "Laundry Deadbolt"
      value_template: >-
        {% if states.sensor.laundryplunger.state == 'ON' %}
          Locked
        {% elif states.sensor.laundryplunger.state == 'OFF' %}
          Unlocked
        {% else %}
          Error
        {% endif %}


- platform: mqtt
  name: "Laundry Touch Switch"
  state_topic: "stat/laundrydoor/POWER3"

#
#
# RSSI Monitoring Sensor for Sonoffs
#
#
- platform: mqtt
  name: "Garage RSSI"
  state_topic: "tele/garage/STATE"
  unit_of_measurement: "RSSI"
  value_template: '{{ value_json["Wifi"]["RSSI"] }}'

- platform: mqtt
  name: "Foyer RSSI"
  state_topic: "tele/foyer/STATE"
  unit_of_measurement: "RSSI"
  value_template: '{{ value_json["Wifi"]["RSSI"] }}'

- platform: mqtt
  name: "Fireplace RSSI"
  state_topic: "tele/fireplace/STATE"
  unit_of_measurement: "RSSI"
  value_template: '{{ value_json["Wifi"]["RSSI"] }}'

- platform: mqtt
  name: "Table RSSI"
  state_topic: "tele/table/STATE"
  unit_of_measurement: "RSSI"
  value_template: '{{ value_json["Wifi"]["RSSI"] }}'

- platform: mqtt
  name: "Tall RSSI"
  state_topic: "tele/tall/STATE"
  unit_of_measurement: "RSSI"
  value_template: '{{ value_json["Wifi"]["RSSI"] }}'

- platform: mqtt
  name: "Island RSSI"
  state_topic: "tele/island/STATE"
  unit_of_measurement: "RSSI"
  value_template: '{{ value_json["Wifi"]["RSSI"] }}'

- platform: mqtt
  name: "Top RSSI"
  state_topic: "tele/top/STATE"
  unit_of_measurement: "RSSI"
  value_template: '{{ value_json["Wifi"]["RSSI"] }}'

- platform: mqtt
  name: "Brandon RSSI"
  state_topic: "tele/brandon/STATE"
  unit_of_measurement: "RSSI"
  value_template: '{{ value_json["Wifi"]["RSSI"] }}'
#
#
# Filter Sensor for Chart Graphs of RSSI with smoothing SMA
#
#
- platform: filter
  name: "Garage RSSI Smoothed"
  entity_id: sensor.garage_rssi
  filters:
    - filter: time_simple_moving_average
      window_size: 02:00
- platform: filter
  name: "Foyer RSSI Smoothed"
  entity_id: sensor.foyer_rssi
  filters:
    - filter: time_simple_moving_average
      window_size: 02:00
- platform: filter
  name: "Fireplace RSSI Smoothed"
  entity_id: sensor.fireplace_rssi
  filters:
    - filter: time_simple_moving_average
      window_size: 02:00
- platform: filter
  name: "Table RSSI Smoothed"
  entity_id: sensor.table_rssi
  filters:
    - filter: time_simple_moving_average
      window_size: 02:00
- platform: filter
  name: "Tall RSSI Smoothed"
  entity_id: sensor.tall_rssi
  filters:
    - filter: time_simple_moving_average
      window_size: 02:00
- platform: filter
  name: "Island RSSI Smoothed"
  entity_id: sensor.island_rssi
  filters:
    - filter: time_simple_moving_average
      window_size: 02:00
- platform: filter
  name: "Top RSSI Smoothed"
  entity_id: sensor.top_rssi
  filters:
    - filter: time_simple_moving_average
      window_size: 02:00
- platform: filter
  name: "Brandon RSSI Smoothed"
  entity_id: sensor.brandon_rssi
  filters:
    - filter: time_simple_moving_average
      window_size: 02:00
#
#
# Filter Sensors for Bar Graphs of RSSI with only 1/6 sampling 
#
#
- platform: filter
  name: "Garage RSSI t"
  entity_id: sensor.garage_rssi
#  unit_of_measurement: "" - have to do this in customize.yaml
  filters:
    - filter: throttle
      window_size: 6
- platform: filter
  name: "Foyer RSSI t"
  entity_id: sensor.foyer_rssi
  filters:
    - filter: throttle
      window_size: 6
- platform: filter
  name: "Fireplace RSSI t"
  entity_id: sensor.fireplace_rssi
  filters:
    - filter: throttle
      window_size: 6
- platform: filter
  name: "Table RSSI t"
  entity_id: sensor.table_rssi
  filters:
    - filter: throttle
      window_size: 6
- platform: filter
  name: "Tall RSSI t"
  entity_id: sensor.tall_rssi
  filters:
    - filter: throttle
      window_size: 6
- platform: filter
  name: "Island RSSI t"
  entity_id: sensor.island_rssi
  filters:
    - filter: throttle
      window_size: 6
- platform: filter
  name: "Top RSSI t"
  entity_id: sensor.top_rssi
  filters:
    - filter: throttle
      window_size: 6
- platform: filter
  name: "Brandon RSSI t"
  entity_id: sensor.brandon_rssi
  filters:
    - filter: throttle
      window_size: 6
# 6 means display only the 1st sample out of every 6 samples... 
# at teleperiod 300, this means history page will give me 
# 12/hr x 24hr / window_size 6 = 48 samples per 24 hr # period... 
# which fits and displays nicely on the default period = 1-day bar graph


#
#
# Uptime Monitoring Sensor for Sonoffs
#
#
- platform: mqtt
  name: "Garage Uptime"
  state_topic: "tele/garage/STATE"
#  unit_of_measurement: "RSSI"
  value_template: '{{ value_json["Uptime"] | regex_replace("T"," Days ") | regex_replace("(..):(..):(..)", "\\1 Hours") }}'

- platform: mqtt
  name: "Foyer Uptime"
  state_topic: "tele/foyer/STATE"
#  unit_of_measurement: "RSSI"
  value_template: '{{ value_json["Uptime"] | regex_replace("T"," Days ") | regex_replace("(..):(..):(..)", "\\1 Hours") }}'

- platform: mqtt
  name: "Fireplace Uptime"
  state_topic: "tele/fireplace/STATE"
#  unit_of_measurement: "RSSI"
  value_template: '{{ value_json["Uptime"] | regex_replace("T"," Days ") | regex_replace("(..):(..):(..)", "\\1 Hours") }}'

- platform: mqtt
  name: "Table Uptime"
  state_topic: "tele/table/STATE"
#  unit_of_measurement: "RSSI"
  value_template: '{{ value_json["Uptime"] | regex_replace("T"," Days ") | regex_replace("(..):(..):(..)", "\\1 Hours") }}'

- platform: mqtt
  name: "Tall Uptime"
  state_topic: "tele/tall/STATE"
#  unit_of_measurement: "RSSI"
  value_template: '{{ value_json["Uptime"] | regex_replace("T"," Days ") | regex_replace("(..):(..):(..)", "\\1 Hours") }}'

- platform: mqtt
  name: "Island Uptime"
  state_topic: "tele/island/STATE"
#  unit_of_measurement: "RSSI"
  value_template: '{{ value_json["Uptime"] | regex_replace("T"," Days ") | regex_replace("(..):(..):(..)", "\\1 Hours") }}'

- platform: mqtt
  name: "Top Uptime"
  state_topic: "tele/top/STATE"
#  unit_of_measurement: "RSSI"
  value_template: '{{ value_json["Uptime"] | regex_replace("T"," Days ") | regex_replace("(..):(..):(..)", "\\1 Hours") }}'

- platform: mqtt
  name: "Brandon Uptime"
  state_topic: "tele/brandon/STATE"
#  unit_of_measurement: "RSSI"
  value_template: '{{ value_json["Uptime"] | regex_replace("T"," Days ") | regex_replace("(..):(..):(..)", "\\1 Hours") }}'
#
#
# DS18B20+ Temperature Sensor attached to Garage ESP-12 / NodeMcu
#
#
- platform: mqtt
  name: "Garage Temp"
  state_topic: "tele/garage/SENSOR"
  unit_of_measurement: "°F"
  value_template: '{{ value_json["DS18B20"]["Temperature"] }}'
#
#
# Speedtest sensors for a custom card for network monitoring in the frontend
#
#
- platform: speedtest
  hour:
    - 1
    - 4
    - 7
    - 15
    - 19
  monitored_conditions:
    - ping
    - download
    - upload
#
#
# Getting sunrise and sunset as badges
#   DarkSky can also provide these, I think - but maybe not as badges?
#   getting some practice with some complex formatting in value_templates here too
#
#
- platform: template
  sensors:
    sunset_time:
      value_template: '{% set timestamp = as_timestamp(states.sun.sun.attributes.next_setting) | timestamp_custom("%I:%M") %} {{ timestamp.lstrip("0") }}'
      friendly_name: "Sunset"
- platform: template
  sensors:
    sunrise_time:
      value_template: '{% set timestamp = as_timestamp(states.sun.sun.attributes.next_rising) | timestamp_custom("%I:%M") %} {{ timestamp.lstrip("0") }}'
      friendly_name: "Sunrise"
#
#
# Loading a ton of DarkSky sensors
#   may want to get rid of some of them later after checking them out
#   note: at least 4 of these change names from below -> entity name
#   The API allows 1000 calls a day for free... Im shooting for 100/day
#   They will send you an email with a bill if you go over... 
#
#
- platform: darksky
  api_key: !secret darksky_api_key
  units: auto
  update_interval: '00:15'
  monitored_conditions:
    - summary
    - temperature
    - temperature_max
    - temperature_min
    - precip_type
    - precip_probability
    - humidity
    - wind_speed
    - nearest_storm_distance
    - hourly_summary
    - daily_summary
    - nearest_storm_bearing
    - precip_intensity
    - precip_accumulation
    - apparent_temperature
    - cloud_cover
    - pressure
    - ozone
    - apparent_temperature_max
    - apparent_temperature_min
    - precip_intensity_max
    - uv_index
#
#
# Monitor size of the database for history/recorder
#
#
- platform: filesize
  file_paths:
    - /config/home-assistant_v2.db
#
#
# Tracks number of lines of YAML code you have
#
#
- platform: command_line
  name: "YAML Config"
  command: "wc -l `find /config -name '*.yaml' -print` | tail -1 | awk ' { print $1 }'"
  unit_of_measurement: "Lines"
  scan_interval: 10800


