#######################################
#                                     #
# Automations                         #
#                                     #
#######################################
#
# 
# This automation pushes empty payload MQTT commands to all Sonoffs (group topic=sonoffs)
# to read their state - which technically HA isnt designed to do.. up to the broker
# add more lines like these if you have any devices with 3 or more relays
#
#
# Note: Theo Arends may have a different similar solution?
# https://github.com/arendst/Sonoff-Tasmota/wiki/What's-New
#   suggests using "cmnd/your_light/state" instead
#
- alias: "Power state on HA start-up"
  trigger:
    platform: homeassistant
    event: start
  action:
    - service: mqtt.publish
      data:
        topic: "cmnd/sonoffs/power1"
        payload: ""
        retain: false
    - service: mqtt.publish
      data:
        topic: "cmnd/sonoffs/power2"
        payload: ""
        retain: false
    - service: mqtt.publish
      data:
        topic: "cmnd/sonoffs/power3"
        payload: ""
        retain: false
#
#
# Automation to detect 5 garage door states
#
#
- alias: garage_door_opening
  trigger:
    platform: state
    entity_id: sensor.reed_switch_closed
    to: 'OFF'
  action:
    service: input_boolean.turn_on
    entity_id: input_boolean.garage_opening

- alias: garage_door_open_complete
  trigger:
    platform: state
    entity_id: sensor.reed_switch_open
    to: 'ON'
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.garage_opening
    - service: input_boolean.turn_off
      entity_id: input_boolean.garage_closing
    - service: input_boolean.turn_off
      entity_id: input_boolean.garage_stopped

- alias: garage_door_closing
  trigger:
    platform: state
    entity_id: sensor.reed_switch_open
    to: 'OFF'
  action:
    service: input_boolean.turn_on
    entity_id: input_boolean.garage_closing

- alias: garage_door_close_complete
  trigger:
    platform: state
    entity_id: sensor.reed_switch_closed
    to: 'ON'
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.garage_closing
    - service: input_boolean.turn_off
      entity_id: input_boolean.garage_opening
    - service: input_boolean.turn_off
      entity_id: input_boolean.garage_stopped

- alias: garage_door_stopped_while_opening
  trigger:
    platform: state
    entity_id: input_boolean.garage_opening
    to: 'on'
    for:
      seconds: 15
  action:
    service: input_boolean.turn_on
    entity_id: input_boolean.garage_stopped

- alias: garage_door_stopped_while_closing
  trigger:
    platform: state
    entity_id: input_boolean.garage_closing
    to: 'on'
    for:
      seconds: 15 
  action:
    service: input_boolean.turn_on
    entity_id: input_boolean.garage_stopped


#
#
# Sends a message to all Alexas if the garage has been open 2hrs
# can only trigger during the day time because of next automation
#
#
- alias: "garageopen2hrs"
  trigger:
    platform: state
    entity_id: cover.garage
    to: 'open'
    for:
      minutes: 121
#      minutes: 1
#  condition:
#    condition: template
#    value_template: '{{ as_timestamp(now()) - as_timestamp(states.automation.garageopen2hrs.attributes.last_triggered) | int > 3000 }}'
# this condition being tested - to prevent excessive alerts... prob better on an "alert"
  action:
    service: notify.alexas
    data:
      message: "This is a reminder to close the garage door,  It has been open for 2 hours!"
#
#
# Closes the garage after 10 minutes any time after sunset
#
# note: multiple triggers use OR criterion, not AND
#       multiple conditions can be programmed with OR/AND logic
#
#
- alias: "garageopenaftersunset"
  trigger:
    - platform: state
      entity_id: cover.garage
      to: 'open'
      for:
#        minutes: 1
        minutes: 10
  condition:
    - condition: sun
      after: sunset
      after_offset: '-00:30:00'
  action:
    - service: notify.alexas
      data:
        message: "Closing the garage door,  It is open after sunset"
    - service: cover.close_cover
      entity_id: cover.garage
#
#
# Turns the Onkyo off when TV is turned off via HA
#
#
- alias: "Audio off with TV"
  initial_state: 'on'
  trigger:
      - platform: state
        entity_id: switch.tv_off
        to: 'on'
        for:
          seconds: 5
  action:
    - service: homeassistant.turn_on
      entity_id: switch.onkyo_off
    - service: homeassistant.turn_off
      entity_id: switch.tv_off
#
#
# Turns the Onkyo on when TV is turned on via HA
#
#
- alias: "Audio on with TV"
  initial_state: 'on'
  trigger:
      - platform: state
        entity_id: switch.tv_on
        to: 'on'
        for:
          seconds: 5
  action:
    - service: homeassistant.turn_on
      entity_id: switch.onkyo_on
    - service: script.mutetv
    - service: homeassistant.turn_off
      entity_id: switch.tv_on
#
#
# sample entry below for simple timer based automations
#
#
#- alias: "Foyer timer"
#  initial_state: 'on'
#  trigger:
#    - platform: state
#      entity_id: switch.Foyer
#      to: 'on'
#      for:
#        minutes: 60
#  action:
#    service: homeassistant.turn_off
#    entity_id: switch.Foyer

- alias: "brandon workaround"
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: light.brandon
      to: 'on'
  condition:
    condition: time
    after: '23:00:00'
    before: '06:00:00'
  action:
    service: homeassistant.turn_off
    entity_id: light.brandon

